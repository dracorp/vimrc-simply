ยง =============================================================
ยง  Dracorp
ยง =============================================================
== Comments.file header == start ==
#!/usr/bin/env bash

<CURSOR>
== Dracorp.file header == map:ch ==
#!/usr/bin/env bash
#===============================================================================
# NAME
#       |FILENAME| - short description
#
# SYNOPSIS
#       |FILENAME| [-dhvV]
#
# DESCRIPTION
#       Long description
#
# OPTIONS
#       -h - prints help
#       -d - debug mode
#       -v - verbose mode
#       -V - prints program version
#
# REQUIREMENTS
#
# EXAMPLES
#
# NOTES
#
# AUTHOR
#       |AUTHOR| |AUTHORREF| <|EMAIL|>
#
# ORGANIZATION
#       |ORGANIZATION|
#
#===============================================================================

<CURSOR>
== Dracorp.file header == map:cH ==
#!/usr/bin/env bash
#===============================================================================
# NAME
#       |FILENAME| - short description
#
# SYNOPSIS
#       |FILENAME| [-dhvV]
#
# DESCRIPTION
#       Long description
#
# OPTIONS
#       -h - prints help
#       -d - debug mode
#       -v - verbose mode
#       -V - prints program version
#
# REQUIREMENTS
#
# EXAMPLES
#
# NOTES
#
# AUTHOR
#       |AUTHOR| |AUTHORREF| <|EMAIL|>
#
# ORGANIZATION
#       |ORGANIZATION|
#
#===============================================================================

PROGRAM_NAME='|FILENAME|'
PROGRAM_VERSION='0.1'

PROGRAM_OPTIONS_AVAILABLE=':hdvV'
PROGRAM_OPTIONS_INPUT=("$@")
declare -A PROGRAM_REQUIREMENTS=(
)
declare -A PROGRAM_OPTIONS_ENABLED=(
    [DEBUG]=0
    [VERBOSE]=0
)

## log4sh
: "${LOG4SH_LEVEL=INFO}"
: "${LOG4SH_TIMESTAMP=1}"

if [[ ! -t 1 ]]; then
    : echo 'not a terminal'
    unset RED NC GREEN
    LOG4SH_COLOR=0
    USE_COLOR=0
else
    : echo terminal
    : "${LOG4SH_COLOR=1}"
    : "${USE_COLOR=1}"
fi

# shellcheck disable=SC2120
_source_log4sh() {
    typeset logFile=$1
    if which basher &>/dev/null && [[ -d $( basher package-path dracorp/log4sh ) ]]; then
        if [[ ! $(type -t include) = function ]]; then
            eval "$(basher init - bash)"
        fi
        include dracorp/log4sh log4sh.sh
        DEBUG "The library log4sh has been loaded from basher"
    elif type log4sh.sh &>/dev/null; then
        # shellcheck disable=SC1091
        . log4sh.sh ${logFile:+-f $logFile} -t "$PROGRAM_LOG_TIMESTAMP" -l "$PROGRAM_LOG_LEVEL" || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from the PATH"
    elif [ -r ~/lib/sh/log4sh/log4sh.sh ]; then
        . ~/lib/sh/log4sh/log4sh.sh ${logFile:+-f $logFile} -t "$PROGRAM_LOG_TIMESTAMP" -l "$PROGRAM_LOG_LEVEL" || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from ~/lib/sh/log4sh/log4sh.sh"
    else
        : "${LOG4SH_COLOR_BOLD='[1;37m'}"
        : "${LOG4SH_COLOR_RED='[1;31m'}"
        : "${LOG4SH_COLOR_WHITE='[0;37m'}"
        : "${LOG4SH_COLOR_GREEN='[1;32m'}"
        : "${LOG4SH_COLOR_YELLOW='[1;33m'}"
        : "${LOG4SH_COLOR_BLUE='[1;34m'}"
        : "${LOG4SH_COLOR_CYAN='[1;36m'}"
        _     : "${LOG4SH_COLOR_OFF='[0m'}"
        DIE() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            exit 1
        }
        FATAL() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            exit 1
        }
        LOGEXIT() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            exit 1
        }
        INFO() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_WHITE}${LOG4SH_COLOR_BOLD}$command - $*${LOG4SH_COLOR_OFF}"
            return
        }
        WARN() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_YELLOW}$command - $*${LOG4SH_COLOR_OFF}"
            return
        }
        ERROR() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            return
        }
        DEBUG() {
            if [ "$PROGRAM_LOG_LEVEL" = 'DEBUG' ]; then
                command=${FUNCNAME[0]}
                printf '%b\n' "${LOG4SH_COLOR_BLUE}$command - $*${LOG4SH_COLOR_OFF}"
            fi
            return
        }
    fi
}
_help() {
    local header pre_header lib_path line retval
    pre_header=''
    lib_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
    if [[ ! -r "$0" ]]; then
        printf '%s\n' "Wrong usage of library ${lib_path}! Use it in a shell script." >&2
        return 1
    fi
    while IFS= read -r line || [ -n "$line" ]; do
        # shellcheck disable=SC2221,SC2222
        case "$line" in
            '#!'*) # Shebang line
                ;;
            '#='*) # comment from header
                ;;
            ''|'##'*|'#='*|[!#]*) # End of comments
                retval=$1
                if [[ ! $retval =~ ^-?[0-9] ]]; then
                    retval=0
                fi
                if [ -n "$1" ]; then
                   exit "$retval"
                fi
                return "$retval"
                ;;
            *) # Comment line
                line=${line:2} # Remove comment prefix
                if [[ "$1" = usage ]]; then
                    # print only usage
                    if [[ "${line}" =~ ^[A-Z\s]+$ ]]; then
                        header=${line}
                    fi
                    if [[ "$header" = SYNOPSIS ]]; then
                        if [[ "$line" = SYNOPSIS ]]; then
                            printf '%s' 'Usage:' >&2
                        else
                            printf '%s\n' "${line}" >&2
                            retval=$2
                            if [[ ! $retval =~ ^-?[0-9] ]]; then
                                retval=0
                            fi
                            if [ -n "$1" ]; then
                                exit "$retval"
                            fi
                            return "$retval"
                        fi
                    else
                        pre_header=$header
                    fi
                else
                    printf '%s\n' "${line}" >&2
                fi
                ;;
        esac
    done < "$0"
}
_usage() {
    _help usage "$1"
}
_version(){
    printf "%s\n" "$PROGRAM_NAME $PROGRAM_VERSION"
}
_parse_program_options() {
    if [[ ${#PROGRAM_OPTIONS_INPUT[@]} -eq 0 ]]; then
        _usage
    fi
    typeset options retval
    options=($(getopt $PROGRAM_OPTIONS_AVAILABLE "${PROGRAM_OPTIONS_INPUT[@]}" 2>/dev/null))
    retval=$?
    if (( retval )); then
        _usage
    fi
    set -- "${options[@]}"
    while [[ "$1" != -- ]]; do
        case $1 in
            -h)
                _help
                exit
                ;;
            -d)
                LOG4SH_LEVEL=DEBUG
                PROGRAM_OPTIONS_ENABLED[DEBUG]=1
                ;;
            -v)
                PROGRAM_OPTIONS_ENABLED[VERBOSE]=1
                ;;
            -V)
                _version
                exit
                ;;
            :)
                ERROR "Parameter -${OPTARG} need argument, please provide one to"
                getHelp
                exit 1
                ;;
            *)
                _usage 1
                ;;
        esac
        shift
    done
    shift # remove --
    PROGRAM_OPTIONS_INPUT=("$@")
}
_check_requirements() {
    retval=0
    for requirement in "${!PROGRAM_REQUIREMENTS[@]}"; do
        if ! which "$requirement" &>/dev/null; then
            retval=1
            ERROR "The program '$requirement' is missing. Install ${PROGRAM_REQUIREMENTS[$requirement]}."
        fi
    done
    if (( retval )); then
        DIE "There are missing some requirements. Check out the list above."
    fi
}
_get_sh_directory() {
    local SOURCE DIR
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    echo $DIR
}
main(){
    _source_log4sh
    _parse_program_options
    _check_requirements
}

main<CURSOR>
== Dracorp.file shell_includes == start, map:csi ==
source_shell_includes() { #{{{
    if [[ "$(type -t include)" = function ]]; then
        # from https://github.com/basherpm/basher
        include dracorp/shell-includes usage.sh
    elif type shell-includes.sh &>/dev/null; then
    # searching for the lib in PATH env
        # shellcheck disable=SC1091
        . shell-includes.sh
    elif [ -r ~/lib/sh/shell-includes/shell-includes.sh ]; then
    # searching in ~/lib/sh/shell-includes directory
        # shellcheck disable=SC1090
        . ~/lib/sh/shell-includes/shell-includes.sh
    fi
} #}}}
== Dracorp.file log4sh == start, map:cls ==
## log4sh
: "${LOG4SH_LEVEL=INFO}"
: "${LOG4SH_TIMESTAMP=1}"

if [[ ! -t 1 ]]; then
    : echo 'not a terminal'
    unset RED NC GREEN
    LOG4SH_COLOR=0
    USE_COLOR=0
else
    : echo terminal
    : "${LOG4SH_COLOR=1}"
    : "${USE_COLOR=1}"
fi
# shellcheck disable=SC2120
_source_log4sh() {
    typeset logFile=$1
    if which basher &>/dev/null && [[ -d $( basher package-path dracorp/log4sh ) ]]; then
        if [[ ! $(type -t include) = function ]]; then
            eval "$(basher init - bash)"
        fi
        include dracorp/log4sh log4sh.sh
        DEBUG "The library log4sh has been loaded from basher"
    elif type log4sh.sh &>/dev/null; then
        # shellcheck disable=SC1091
        . log4sh.sh ${logFile:+-f $logFile} -t "$PROGRAM_LOG_TIMESTAMP" -l "$PROGRAM_LOG_LEVEL" || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from the PATH"
    elif [ -r ~/lib/sh/log4sh/log4sh.sh ]; then
        . ~/lib/sh/log4sh/log4sh.sh ${logFile:+-f $logFile} -t "$PROGRAM_LOG_TIMESTAMP" -l "$PROGRAM_LOG_LEVEL" || { printf '%s\n' "Error during sourcing of ~/lib/log4sh.sh"; exit 1; }
        DEBUG "The library log4sh has been loaded from ~/lib/sh/log4sh/log4sh.sh"
    else
        : "${LOG4SH_COLOR_BOLD='[1;37m'}"
        : "${LOG4SH_COLOR_RED='[1;31m'}"
        : "${LOG4SH_COLOR_WHITE='[0;37m'}"
        : "${LOG4SH_COLOR_GREEN='[1;32m'}"
        : "${LOG4SH_COLOR_YELLOW='[1;33m'}"
        : "${LOG4SH_COLOR_BLUE='[1;34m'}"
        : "${LOG4SH_COLOR_CYAN='[1;36m'}"
   _     : "${LOG4SH_COLOR_OFF='[0m'}"
        DIE() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            exit 1
        }
        FATAL() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            exit 1
        }
        LOGEXIT() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            exit 1
        }
        INFO() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_WHITE}${LOG4SH_COLOR_BOLD}$command - $*${LOG4SH_COLOR_OFF}"
                    return
        }
        WARN() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_YELLOW}$command - $*${LOG4SH_COLOR_OFF}"
            return
        }
        ERROR() {
            command=${FUNCNAME[0]}
            printf '%b\n' "${LOG4SH_COLOR_RED}$command - $*${LOG4SH_COLOR_OFF}"
            return
        }
        DEBUG() {
                    if [ "$PROGRAM_LOG_LEVEL" = 'DEBUG' ]; then
                command=${FUNCNAME[0]}
                printf '%b\n' "${LOG4SH_COLOR_BLUE}$command - $*${LOG4SH_COLOR_OFF}"
                    fi
                    return
        }
    fi
}
_source_log4sh
== ENDTEMPLATE ==
